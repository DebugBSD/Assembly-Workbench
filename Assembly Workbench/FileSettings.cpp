/////////////////////////////////////////////////////////////////////////////
// Name:        filesettings.cpp
// Purpose:     
// Author:      
// Modified by: 
// Created:     09/05/2020 20:18:43
// RCS-ID:      
// Copyright:   
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (unregistered), 09/05/2020 20:18:43
#include "stdafx.h"
// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
#include "wx/imaglist.h"
////@end includes

#include "filesettings.h"

////@begin XPM images

////@end XPM images


/*
 * FileSettings type definition
 */

IMPLEMENT_DYNAMIC_CLASS( FileSettings, wxDialog )


/*
 * FileSettings event table definition
 */

BEGIN_EVENT_TABLE( FileSettings, wxDialog )

////@begin FileSettings event table entries
////@end FileSettings event table entries

END_EVENT_TABLE()


/*
 * FileSettings constructors
 */

FileSettings::FileSettings()
{
    Init();
}

FileSettings::FileSettings( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();

    Create(parent, id, caption, pos, size, style);
}


/*
 * FileSettings creator
 */

bool FileSettings::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin FileSettings creation
    SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY|wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    SetMinSize(size);
    Centre();
////@end FileSettings creation
    return true;
}


/*
 * FileSettings destructor
 */

FileSettings::~FileSettings()
{
////@begin FileSettings destruction
////@end FileSettings destruction
}


/*
 * Member initialisation
 */

void FileSettings::Init()
{
////@begin FileSettings member initialisation
#if defined(__WXMSW__)
    m_pProjectConfigCtrl = nullptr;
    m_pPlatformConfCtrl = nullptr;
    m_pSplitter = nullptr;
    m_pPropGridCtrl = nullptr;
#endif
////@end FileSettings member initialisation
}


/*
 * Control creation for FileSettings
 */

void FileSettings::CreateControls()
{    
////@begin FileSettings content construction
    // Generated by DialogBlocks, 09/05/2020 20:18:43 (unregistered)

    FileSettings* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer1 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer2->Add(itemBoxSizer1, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer1->Add(itemBoxSizer3, 0, wxGROW | wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText(itemDialog1, wxID_STATIC, _("Project Config"), wxDefaultPosition, wxDefaultSize, 0);
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

    wxArrayString m_pProjectConfigCtrlStrings;
    m_pProjectConfigCtrlStrings.Add(_("Debug"));
    m_pProjectConfigCtrlStrings.Add(_("Release"));
    m_pProjectConfigCtrlStrings.Add(_("Add New"));
    m_pProjectConfigCtrl = new wxComboBox(itemDialog1,wxID_ANY,"Debug",wxDefaultPosition, wxDefaultSize, m_pProjectConfigCtrlStrings,wxALIGN_LEFT | wxCB_READONLY);
    m_pProjectConfigCtrl->SetStringSelection(_("Debug"));
    itemBoxSizer3->Add(m_pProjectConfigCtrl, 1, wxALIGN_CENTER_VERTICAL | wxALL, 5);

    itemBoxSizer3->Add(5, 5, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

    wxStaticText* itemStaticText7 = new wxStaticText(itemDialog1, wxID_STATIC, _("Platform Config"), wxDefaultPosition, wxDefaultSize, 0);
    itemBoxSizer3->Add(itemStaticText7, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

    wxArrayString m_pPlatformConfCtrlStrings;
    m_pPlatformConfCtrlStrings.Add(_("X64"));
    m_pPlatformConfCtrlStrings.Add(_("X86"));
    m_pPlatformConfCtrlStrings.Add(_("ARM"));
    m_pPlatformConfCtrlStrings.Add(_("ARM64"));
    m_pPlatformConfCtrlStrings.Add(_("Add New"));
    m_pPlatformConfCtrl = new wxComboBox(itemDialog1, wxID_ANY, "X64", wxDefaultPosition, wxDefaultSize, m_pPlatformConfCtrlStrings, wxALIGN_LEFT | wxCB_READONLY);
    m_pPlatformConfCtrl->SetStringSelection(_("X64"));
    itemBoxSizer3->Add(m_pPlatformConfCtrl, 1, wxALIGN_CENTER_VERTICAL | wxALL, 5);

    itemBoxSizer1->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL | wxALL, 5);

    m_pSplitter = new wxSplitterWindow( itemDialog1, ID_SPLITTERWINDOW, wxDefaultPosition, wxSize(100, 100), wxSP_3DBORDER|wxSP_3DSASH|wxNO_BORDER );
    m_pSplitter->SetMinimumPaneSize(0);

    wxTreeCtrl* itemTreeCtrl5 = new wxTreeCtrl( m_pSplitter, ID_TREECTRL, wxDefaultPosition, wxSize(100, 100), wxTR_SINGLE );

    wxPanel* itemPanel6 = new wxPanel( m_pSplitter, ID_PANEL, wxDefaultPosition, wxDefaultSize, wxNO_BORDER | wxTAB_TRAVERSAL);
    itemPanel6->SetExtraStyle(wxWS_EX_VALIDATE_RECURSIVELY);
    wxBoxSizer* itemBoxSizer7 = new wxBoxSizer(wxVERTICAL);
    itemPanel6->SetSizer(itemBoxSizer7);

    wxBoxSizer* itemBoxSizer8 = new wxBoxSizer(wxVERTICAL);
    itemBoxSizer7->Add(itemBoxSizer8, 1, wxGROW | wxALL, 0);
    wxBoxSizer* itemBoxSizer4 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer8->Add(itemBoxSizer4, 0, wxGROW | wxALL, 5);
    wxStaticText* itemStaticText5 = new wxStaticText(itemPanel6, wxID_STATIC, _("Property"), wxDefaultPosition, wxDefaultSize, 0);
    itemBoxSizer4->Add(itemStaticText5, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);

    wxTextCtrl* itemTextCtrl6 = new wxTextCtrl(itemPanel6, ID_TEXTCTRL, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0);
    itemBoxSizer4->Add(itemTextCtrl6, 1, wxGROW | wxALL, 5);

    wxArrayString itemComboBox1Strings;
    itemComboBox1Strings.Add("String");
    itemComboBox1Strings.Add("Array of Strings");
    itemComboBox1Strings.Add("Integer");
    itemComboBox1Strings.Add("Boolean");
    wxComboBox* itemComboBox1 = new wxComboBox(itemPanel6, wxID_ANY, "String", wxDefaultPosition, wxDefaultSize, itemComboBox1Strings, wxCB_DROPDOWN| wxCB_READONLY);
    itemBoxSizer4->Add(itemComboBox1, 0, wxALIGN_CENTER_VERTICAL | wxALL, 5);


    wxButton* itemButton7 = new wxButton(itemPanel6, wxID_ANY, _("Add"), wxDefaultPosition, wxDefaultSize, 0);
    itemBoxSizer4->Add(itemButton7, 0, wxGROW | wxALL, 5);

    itemBoxSizer8->Add(5, 5, 0, wxALIGN_CENTER_HORIZONTAL | wxALL, 5);

    // Construct wxPropertyGrid control
    m_pPropGridCtrl = new wxPropertyGrid(
        itemPanel6, // parent
        wxID_ANY, // id
        wxDefaultPosition, // position
        wxDefaultSize, // size
        // Here are just some of the supported window styles
        wxPG_AUTO_SORT | // Automatic sorting after items added
        wxPG_SPLITTER_AUTO_CENTER | // Automatically center splitter until user manually adjusts it
        // Default style
        wxPG_DEFAULT_STYLE);
    itemBoxSizer8->Add(m_pPropGridCtrl, 1, wxGROW | wxALL, 0);

    // Window style flags are at premium, so some less often needed ones are
    // available as extra window styles (wxPG_EX_xxx) which must be set using
    // SetExtraStyle member function. wxPG_EX_HELP_AS_TOOLTIPS, for instance,
    // allows displaying help strings as tool tips.
    m_pPropGridCtrl->SetExtraStyle(wxPG_EX_HELP_AS_TOOLTIPS);

    // wxArrayStringProperty embeds a wxArrayString.
    wxArrayString arrayStr;
    arrayStr.Add("test1");
    arrayStr.Add("test2");
    arrayStr.Add("test3");
    m_pPropGridCtrl->Append(new wxArrayStringProperty("Label of ArrayStringProperty",
        "NameOfArrayStringProp", arrayStr));

    // A file selector property.
    m_pPropGridCtrl->Append(new wxFileProperty("FileProperty", wxPG_LABEL, wxEmptyString));

    // Extra: set wild card for file property (format same as in wxFileDialog).
    m_pPropGridCtrl->SetPropertyAttribute("FileProperty",
        wxPG_FILE_WILDCARD,
        "All files (*.*)|*.*");

    // Extra: We set the delimiter to the array of strings to ;
    m_pPropGridCtrl->SetPropertyAttribute("NameOfArrayStringProp",
        wxPG_ARRAY_DELIMITER,
        ";");

    m_pSplitter->SplitVertically(itemTreeCtrl5, itemPanel6, 150);
    itemBoxSizer1->Add(m_pSplitter, 1, wxGROW|wxALL, 5);

    wxBoxSizer* itemBoxSizer14 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer1->Add(itemBoxSizer14, 0, wxALIGN_RIGHT|wxALL, 5);

    itemBoxSizer14->Add(5, 5, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton17 = new wxButton( itemDialog1, wxID_OK, _("Ok"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer14->Add(itemButton17, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxButton* itemButton18 = new wxButton( itemDialog1, wxID_CANCEL, _("Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer14->Add(itemButton18, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

////@end FileSettings content construction
}


/*
 * Should we show tooltips?
 */

bool FileSettings::ShowToolTips()
{
    return true;
}

/*
 * Get bitmap resources
 */

wxBitmap FileSettings::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin FileSettings bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end FileSettings bitmap retrieval
}

/*
 * Get icon resources
 */

wxIcon FileSettings::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin FileSettings icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end FileSettings icon retrieval
}
